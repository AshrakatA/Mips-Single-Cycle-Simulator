package mips.simulator;

import java.util.*;
import javax.swing.*;

public class MipsDatapath extends javax.swing.JFrame {

    int count = 0;
    ArrayList<generatecode> Collect = new ArrayList();
    DataMemory DMem = new DataMemory();
    registers_file reg = new registers_file();
    ConvertBinary b = new ConvertBinary();
    MUX muxR;
    MUX muxA;
    MUX muxD;
    MUX muxAnd;
    MUX muxJ;
    ShiftLeft s = new ShiftLeft();
    ALU alu;
    ALUController ac = new ALUController();
    control c;
    int PC;

    public MipsDatapath() {
        initComponents();
        initTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("checked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        types = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        Registerstable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Memorytable = new javax.swing.JTable();
        assemble = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        clockcycles = new javax.swing.JLabel();
        JLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rtR = new javax.swing.JComboBox<>();
        Rinstruction = new javax.swing.JComboBox<>();
        addR = new javax.swing.JButton();
        rd = new javax.swing.JComboBox<>();
        rsR = new javax.swing.JComboBox<>();
        shamt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        Jinstruction = new javax.swing.JComboBox<>();
        addJ = new javax.swing.JButton();
        Jaddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        Iinstruction = new javax.swing.JComboBox<>();
        addI = new javax.swing.JButton();
        rtI = new javax.swing.JComboBox<>();
        rsI = new javax.swing.JComboBox<>();
        imm = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        extraaddress = new javax.swing.JTextField();
        extradata = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addextra = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Instructions = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        Wires = new javax.swing.JTextArea();
        undo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mips Simulator\n");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(100, 10));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(51, 0, 102));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setAutoscrolls(true);

        Registerstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "n", "Register", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registerstable.setFillsViewportHeight(true);
        Registerstable.setName(""); // NOI18N
        Registerstable.setRowHeight(19);
        Registerstable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Registerstable);
        if (Registerstable.getColumnModel().getColumnCount() > 0) {
            Registerstable.getColumnModel().getColumn(0).setResizable(false);
            Registerstable.getColumnModel().getColumn(0).setPreferredWidth(2);
            Registerstable.getColumnModel().getColumn(1).setResizable(false);
            Registerstable.getColumnModel().getColumn(1).setPreferredWidth(2);
            Registerstable.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Registers", new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Stack_10px.png")), jScrollPane3); // NOI18N

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N

        Memorytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null},
                {"", null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Address", "Data"
            }
        ));
        Memorytable.setRowHeight(17);
        Memorytable.setRowSelectionAllowed(false);
        Memorytable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Memorytable);

        jTabbedPane1.addTab("Memory", new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Memory_Slot_10px.png")), jScrollPane2, ""); // NOI18N

        assemble.setBackground(new java.awt.Color(51, 0, 102));
        assemble.setForeground(new java.awt.Color(255, 255, 255));
        assemble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Collect_13px.png"))); // NOI18N
        assemble.setText("Assemble");
        assemble.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        assemble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assembleActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(51, 0, 102));
        reset.setForeground(new java.awt.Color(255, 255, 255));
        reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Reset_13px.png"))); // NOI18N
        reset.setText("Reset");
        reset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        clockcycles.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        clockcycles.setForeground(new java.awt.Color(51, 0, 102));
        clockcycles.setText("0");
        clockcycles.setToolTipText("");

        JLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        JLabel.setForeground(new java.awt.Color(51, 0, 102));
        JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Alarm_Clock_15px.png"))); // NOI18N
        JLabel.setText("Clock Cycles:");
        JLabel.setToolTipText("");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "R-TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 18), new java.awt.Color(51, 0, 102))); // NOI18N

        rtR.setBackground(new java.awt.Color(255, 255, 255));
        rtR.setForeground(new java.awt.Color(51, 0, 51));
        rtR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$0", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" }));
        rtR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        Rinstruction.setBackground(new java.awt.Color(255, 255, 255));
        Rinstruction.setForeground(new java.awt.Color(51, 0, 51));
        Rinstruction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "add", "and", "or", "sub", "nor", "mul", "sll", "srl", "slt", "sltu", "jr" }));
        Rinstruction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Rinstruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RinstructionActionPerformed(evt);
            }
        });

        addR.setBackground(new java.awt.Color(51, 0, 102));
        addR.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        addR.setForeground(new java.awt.Color(255, 255, 255));
        addR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Add_New_14px.png"))); // NOI18N
        addR.setText("Add");
        addR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRActionPerformed(evt);
            }
        });

        rd.setBackground(new java.awt.Color(255, 255, 255));
        rd.setForeground(new java.awt.Color(51, 0, 51));
        rd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$0", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" }));
        rd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rsR.setBackground(new java.awt.Color(255, 255, 255));
        rsR.setForeground(new java.awt.Color(51, 0, 51));
        rsR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$0", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" }));
        rsR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        shamt.setEditable(false);
        shamt.setBackground(new java.awt.Color(255, 255, 255));
        shamt.setToolTipText("shamt: enabled at sll\n");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Rinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rsR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rtR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(shamt, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(addR)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Rinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rsR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addR)
                    .addComponent(shamt, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "J-TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 18), new java.awt.Color(51, 0, 102))); // NOI18N

        Jinstruction.setBackground(new java.awt.Color(255, 255, 255));
        Jinstruction.setForeground(new java.awt.Color(51, 0, 51));
        Jinstruction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "j", "jal" }));
        Jinstruction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        addJ.setBackground(new java.awt.Color(51, 0, 102));
        addJ.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        addJ.setForeground(new java.awt.Color(255, 255, 255));
        addJ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Add_New_14px.png"))); // NOI18N
        addJ.setText("Add");
        addJ.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Jinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Jaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addJ)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Jinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJ)
                    .addComponent(Jaddress, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Marker_18px.png"))); // NOI18N
        jLabel1.setText("Initial Address:");

        address.setText("0");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "I-TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 18), new java.awt.Color(51, 0, 102))); // NOI18N

        Iinstruction.setBackground(new java.awt.Color(255, 255, 255));
        Iinstruction.setForeground(new java.awt.Color(51, 0, 51));
        Iinstruction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "addi", "andi", "ori", "beq", "bne", "lb", "lbu", "lw", "lh", "lhu", "lui", "sb", "sh", "slti", "sltiu", "sw" }));
        Iinstruction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Iinstruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IinstructionActionPerformed(evt);
            }
        });

        addI.setBackground(new java.awt.Color(51, 0, 102));
        addI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        addI.setForeground(new java.awt.Color(255, 255, 255));
        addI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Add_New_14px.png"))); // NOI18N
        addI.setText("Add");
        addI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIActionPerformed(evt);
            }
        });

        rtI.setBackground(new java.awt.Color(255, 255, 255));
        rtI.setForeground(new java.awt.Color(51, 0, 51));
        rtI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$0", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" }));
        rtI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rsI.setBackground(new java.awt.Color(255, 255, 255));
        rsI.setForeground(new java.awt.Color(51, 0, 51));
        rsI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$0", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" }));
        rsI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Iinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(rtI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rsI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imm, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121)
                .addComponent(addI)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Iinstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rsI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addI)
                    .addComponent(imm, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Memory Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(51, 0, 102))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 102));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Map_Marker_18px_1.png"))); // NOI18N
        jLabel2.setText("Address:");

        jLabel3.setBackground(new java.awt.Color(51, 0, 102));
        jLabel3.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 102));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Binary_File_18px.png"))); // NOI18N
        jLabel3.setText("Data:");

        addextra.setBackground(new java.awt.Color(51, 0, 102));
        addextra.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        addextra.setForeground(new java.awt.Color(255, 255, 255));
        addextra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Add_New_14px.png"))); // NOI18N
        addextra.setText("Add");
        addextra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addextra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addextraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extraaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extradata, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addextra)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(extraaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extradata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addextra))
                .addContainerGap())
        );

        jScrollPane5.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane5.setBorder(null);
        jScrollPane5.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Instructions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(51, 0, 102))); // NOI18N

        Instructions.setEditable(false);
        Instructions.setColumns(20);
        Instructions.setRows(5);
        jScrollPane5.setViewportView(Instructions);

        jScrollPane6.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane6.setBorder(null);
        jScrollPane6.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wires", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(51, 0, 102))); // NOI18N

        Wires.setEditable(false);
        Wires.setColumns(20);
        Wires.setRows(5);
        Wires.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane6.setViewportView(Wires);

        undo.setBackground(new java.awt.Color(51, 0, 102));
        undo.setForeground(new java.awt.Color(255, 255, 255));
        undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mips/simulator/icons/icons8_Undo_13px.png"))); // NOI18N
        undo.setText("Undo");
        undo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(assemble)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clockcycles)
                        .addGap(167, 167, 167)
                        .addComponent(undo)
                        .addGap(18, 18, 18)
                        .addComponent(reset))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assemble, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabel)
                    .addComponent(clockcycles)
                    .addComponent(undo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void assembleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleActionPerformed
        PC = Integer.parseInt(address.getText());
        for (int i = 0; i < Collect.size(); i++, PC += 4) {
            Collect.get(i).setPc(PC);
        }
        datapath();
        initTable();

    }//GEN-LAST:event_assembleActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        count = 0;
        shamt.setText("");
        imm.setText("");
        Jaddress.setText("");
        extraaddress.setText("");
        extradata.setText("");
        Instructions.setText("");
        Wires.setText("");
        clockcycles.setText("0");
        Collect.clear();
        reg.empty();
        reg.writedata(28, 268468224);
        reg.writedata(29, 2147479548);
        DMem.DM.clear();
        for (int i = 0; i < 100; i++) {
            Memorytable.setValueAt(null, i, 0);
            Memorytable.setValueAt(null, i, 1);
        }
        initTable();


    }//GEN-LAST:event_resetActionPerformed

    private void addextraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addextraActionPerformed
        try {
            DMem.store(Integer.parseInt(extradata.getText()), Integer.parseInt(extraaddress.getText()));
            initTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter Address and Data");
        }
    }//GEN-LAST:event_addextraActionPerformed

    private void addRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRActionPerformed
        try {
            switch (Rinstruction.getSelectedItem().toString()) {
                case "sll":
                case "srl": {
                    String i = Rinstruction.getSelectedItem().toString();
                    int r1 = (rd.getSelectedIndex());
                    int r3 = (rtR.getSelectedIndex());
                    int sh = Integer.parseInt(shamt.getText());
                    generatecode IR = new generatecode(i, r1, 0, r3, sh);
                    Collect.add(IR);
                    String temp = (count) + "  " + Rinstruction.getSelectedItem().toString() + "  " + rd.getSelectedItem().toString() + ", " + rtR.getSelectedItem().toString() + ", " + shamt.getText() + "\n";
                    Instructions.append(temp);
                    break;
                }
                case "jr": {
                    String i = Rinstruction.getSelectedItem().toString();
                    int r2 = (rsR.getSelectedIndex());
                    generatecode IR = new generatecode(i, 0, r2, 0, 0);
                    Collect.add(IR);
                    String temp = (count) + "  " + Rinstruction.getSelectedItem().toString() + "  " + rsR.getSelectedItem().toString() + "\n";
                    Instructions.append(temp);
                    break;
                }
                default: {
                    String i = Rinstruction.getSelectedItem().toString();
                    int r1 = (rd.getSelectedIndex());
                    int r2 = (rsR.getSelectedIndex());
                    int r3 = (rtR.getSelectedIndex());
                    generatecode IR = new generatecode(i, r1, r2, r3, 0);
                    Collect.add(IR);
                    String temp = (count) + "  " + Rinstruction.getSelectedItem().toString() + "  " + rd.getSelectedItem().toString() + ", " + rsR.getSelectedItem().toString() + ", " + rtR.getSelectedItem().toString() + "\n";
                    Instructions.append(temp);
                    break;
                }
            }

            count++;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter the shifting amount");
        }

    }//GEN-LAST:event_addRActionPerformed

    private void RinstructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RinstructionActionPerformed

        switch (Rinstruction.getSelectedItem().toString()) {
            case "sll":
            case "srl":
                rsR.setEnabled(false);
                rd.setEnabled(true);
                rtR.setEnabled(true);
                shamt.setEditable(true);
                break;
            case "jr":
                rd.setEnabled(false);
                rtR.setEnabled(false);
                rsR.setEnabled(true);
                shamt.setEditable(false);
                break;
            default:
                rsR.setEnabled(true);
                rd.setEnabled(true);
                rtR.setEnabled(true);
                shamt.setEditable(false);
                break;

        }


    }//GEN-LAST:event_RinstructionActionPerformed

    private void addIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIActionPerformed
        try {
            String i = Iinstruction.getSelectedItem().toString();
            int r2 = (rsI.getSelectedIndex());
            int r3 = (rtI.getSelectedIndex());
            int consta = Integer.parseInt(imm.getText());
            generatecode II = new generatecode(i, 0, r2, r3, consta);
            Collect.add(II);
            if (Iinstruction.getSelectedItem().toString().equals("lw")
                    || Iinstruction.getSelectedItem().toString().equals("sw")
                    || Iinstruction.getSelectedItem().toString().equals("lb")
                    || Iinstruction.getSelectedItem().toString().equals("sb")
                    || Iinstruction.getSelectedItem().toString().equals("lbu")
                    || Iinstruction.getSelectedItem().toString().equals("lh")
                    || Iinstruction.getSelectedItem().toString().equals("sh")
                    || Iinstruction.getSelectedItem().toString().equals("lhu")) {
                String temp = (count) + "  "
                        + Iinstruction.getSelectedItem().toString()
                        + "  " + rtI.getSelectedItem().toString()
                        + ", " + imm.getText() + "("
                        + rsI.getSelectedItem().toString() + ")" + "\n";
                Instructions.append(temp);
            } else if (Iinstruction.getSelectedItem().toString().equals("lui")) {
                String temp = (count) + "  " + Iinstruction.getSelectedItem().toString() + "  " + rtI.getSelectedItem().toString() + ", " + imm.getText() + "\n";
                Instructions.append(temp);

            } else {
                String temp = (count) + "  " + Iinstruction.getSelectedItem().toString() + "  " + rtI.getSelectedItem().toString() + ", " + rsI.getSelectedItem().toString() + ", " + imm.getText() + "\n";
                Instructions.append(temp);
            }
            count++;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter the immediate value");
        }


    }//GEN-LAST:event_addIActionPerformed

    private void addJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJActionPerformed
        try {
            String i = Jinstruction.getSelectedItem().toString();
            int consta = Integer.parseInt(Jaddress.getText());
            generatecode IJ = new generatecode(i, 0, 0, 0, consta);
            Collect.add(IJ);
            String temp = (count) + "  " + Jinstruction.getSelectedItem().toString() + "  " + Jaddress.getText() + "\n";
            Instructions.append(temp);
            count++;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter the address");
        }

    }//GEN-LAST:event_addJActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        Collect.remove(count - 1);
        int j = 0;
        for (int i = 0; i < Instructions.getRows(); i++) {
            for (int k = 0; k < Instructions.getText().length() - 1; k++) {
                if (Instructions.getText().charAt(k) == '\n') {
                    j = k;
                }
            }
        }
        if (Instructions.getRows() == 0) {
            Instructions.setText(Instructions.getText().substring(0, j) + "\n");
        } else {
            Instructions.setText(Instructions.getText().substring(0, j));
        }
        count--;
    }//GEN-LAST:event_undoActionPerformed

    private void IinstructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IinstructionActionPerformed
        switch (Iinstruction.getSelectedItem().toString()) {
            case "lui":
                rsI.setEnabled(false);
                rtI.setEnabled(true);
                break;
            default:
                rsI.setEnabled(true);
                rtI.setEnabled(true);
        }
    }//GEN-LAST:event_IinstructionActionPerformed

    public void initTable() {
        for (int i = 0; i < 32; i++) {
            Registerstable.setValueAt(i, i, 0);
            Registerstable.setValueAt(reg.r[i].getname(), i, 1);
            Registerstable.setValueAt(reg.r[i].getdata(), i, 2);
        }
        for (int i = 0; i < DMem.DM.size(); i++) {
            Memorytable.setValueAt(DMem.DM.get(i).getAddress(), i, 0);
            Memorytable.setValueAt(DMem.DM.get(i).getValue(), i, 1);
        }

    }

    public void datapath() {
        int cycles = 0;
        int jump = 0;
        int muxJout = 0;
        int muxAndout = 0;
        int muxAout = 0;
        Wires.setText("");
        String w;
        String w31;
        String w25;
        String w20;
        String w15;
        String w150;
        String w5;
        String w250 = "";

        int PC_temp = Integer.parseInt(address.getText()); //address input from user
        int i = 0;
        while (PC_temp <= Collect.get(Collect.size() - 1).getPc()) {
            i = (PC_temp - Integer.parseInt(address.getText())) / 4;

            if (PC_temp == Collect.get(i).getPc()) {
                switch (Collect.get(i).getInstruction()) {
                    case "add":
                    case "and":
                    case "or":
                    case "sub":
                    case "nor":
                    case "sll":
                    case "srl":
                    case "jr":
                    case "sltu":
                    case "slt":
                    case "mul":
                        w31 = Collect.get(i).instructioncode()[0];
                        w25 = Collect.get(i).instructioncode()[1];
                        w20 = Collect.get(i).instructioncode()[2];
                        w15 = Collect.get(i).instructioncode()[3];
                        w150 = Collect.get(i).instructioncode()[3] + Collect.get(i).instructioncode()[4] + Collect.get(i).instructioncode()[5];
                        w5 = Collect.get(i).instructioncode()[5];
                        w = w31 + w25 + w20 + w150;
                        break;
                    case "addi":
                    case "andi":
                    case "ori":
                    case "beq":
                    case "bne":
                    case "lb":
                    case "lbu":
                    case "lw":
                    case "lh":
                    case "lhu":
                    case "lui":
                    case "sw":
                    case "sh":
                    case "sb":
                    case "slti":
                    case "sltiu":
                        w31 = Collect.get(i).instructioncode()[0];
                        w25 = Collect.get(i).instructioncode()[1];
                        w20 = Collect.get(i).instructioncode()[2];
                        w15 = Collect.get(i).instructioncode()[3].substring(0, 5);
                        w150 = Collect.get(i).instructioncode()[3];
                        w5 = Collect.get(i).instructioncode()[3].substring(10);
                        w = w31 + w25 + w20 + w150;
                        break;
                    default:
                        w31 = Collect.get(i).instructioncode()[0];
                        w25 = Collect.get(i).instructioncode()[1].substring(0, 5);
                        w20 = Collect.get(i).instructioncode()[1].substring(5, 10);
                        w15 = Collect.get(i).instructioncode()[1].substring(10, 15);
                        w150 = Collect.get(i).instructioncode()[1].substring(10);
                        w5 = Collect.get(i).instructioncode()[1].substring(20);
                        //w250 = w25 + w20 + w150;
                        w250 = b.ConvertToBinary(Collect.get(i).getConsta(), 26);
                        w = w31 + w25 + w20 + w150;
                        break;
                }
                c = new control(w31);
                muxR = new MUX(w20, w15, "11111");//first input is rs, second input is rt
                int muxRout = Integer.parseInt(muxR.outputextra(c.getRegDst()), 2);

                //alu
                if (Collect.get(i).getConsta() < 0)//negative decimals handling
                {
                    String temp = b.ConvertToBinary(-(Collect.get(i).getConsta()), 16);
                    muxA = new MUX(reg.readdata(Integer.parseInt(w20, 2)), -(Integer.parseInt(b.ConvertToBinary(Integer.parseInt(temp, 2), 32), 2)));
                    muxAout = muxA.outputi(Integer.parseInt(c.getALUSrc(), 2));

                    alu = new ALU(reg.readdata(Integer.parseInt(w25, 2)), muxAout, ac.ALUController(c.getALUOp(), w5));//alu with first input data fromregister with index = binary value of rs, and second input is the decimal value of output of the mux, third input is the AC with inputs Aluop and function
                    if (Collect.get(i).getInstruction().equals("sll") || Collect.get(i).getInstruction().equals("srl")) {
                        alu.setShamt(Integer.parseInt(shamt.getText()));
                    } else {
                        alu.setShamt(0);
                    }

                } else {
                    muxA = new MUX(reg.readdata(Integer.parseInt(w20, 2)), Integer.parseInt(b.ConvertToBinary(Integer.parseInt(w150, 2), 32), 2));
                    muxAout = muxA.outputi(Integer.parseInt(c.getALUSrc(), 2));

                    alu = new ALU(reg.readdata(Integer.parseInt(w25, 2)), muxAout, ac.ALUController(c.getALUOp(), w5));//alu with first input data fromregister with index = binary value of rs, and second input is the decimal value of output of the mux, third input is the AC with inputs Aluop and function

                    if (Collect.get(i).getInstruction().equals("sll") || Collect.get(i).getInstruction().equals("srl")) {
                        alu.setShamt(Integer.parseInt(shamt.getText()));
                    } else {
                        alu.setShamt(0);
                    }

                }

                //for branching
                if (c.getBranch().equals("1")) {
                    if (alu.operations() == 0) {
                        alu.setZeroflag(1);
                    } else if (alu.operations() != 0 && Collect.get(i).getInstruction().equals("bne")) {
                        alu.setZeroflag(1);
                    }
                }
                int Asecond = (PC_temp + 4) + Integer.parseInt(s.shift(Integer.parseInt(b.ConvertToBinary(Integer.parseInt(w150, 2), 32), 2), 32), 2);
                muxAnd = new MUX(PC_temp + 4, Asecond);//and mux with first input pc+4, and second input shift left of the second input of muxA+PC+4
                muxAndout = muxAnd.outputi((Integer.parseInt(c.getBranch(), 2) & alu.getZeroflag()));
                System.out.println(muxAndout);

                //jr instruction
                if (Collect.get(i).getInstruction().equals("jr")) {
                    c.setJump("0");
                    c.setRegWrite("0");
                    c.setRegDst("0");
                    c.setALUOp("00");
                    c.setALUSrc("0");
                    c.setMemWrite("0");
                    c.setMemRead("0");
                    c.setMemToReg("0");
                    c.setBranch("0");
                }
                //for jumping

                if (c.getJump().equals("1")) {
                    // muxJ = new MUX((Integer.parseInt(c.getBranch(), 2) & alu.getZeroflag()), Integer.parseInt((b.ConvertToBinary(PC, 32)).substring(0, 4) + s.shift(Collect.get(i).getConsta(), 28)));
                    jump = Integer.parseInt(b.ConvertToBinary(PC_temp, 32).substring(0, 4) + s.shift(Integer.parseInt(w250, 2), 28), 2);
                    muxJ = new MUX(muxAndout, jump);
                    muxJout = muxJ.outputi(Integer.parseInt(c.getJump(), 2));
                    //   PC_temp = muxJ.outputi(Integer.parseInt(c.getJump(), 2));
                }

                //data memory
                if (c.getMemWrite().equals("1")) {
                    DMem.store(reg.readdata(Integer.parseInt(w20, 2)), alu.operations());
                }
                muxD = new MUX(alu.operations(), DMem.load(alu.operations()), PC_temp + 4);
                int muxDout = muxD.outputiextra(Integer.parseInt(c.getMemToReg(), 2));

                if (c.getRegWrite().equals("1")) {
                    //reg.writedata(Integer.parseInt(muxR.outputextra(c.getRegDst()), 2), muxD.ouputiextra(Integer.parseInt(c.getMemToReg(), 2)));
                    reg.writedata(muxRout, muxDout);
                    if (muxRout == 0) {
                        JOptionPane.showMessageDialog(this, "Cannot set data in register $0");

                    }
                }//write data = the decimal value of the output of mux of data memory in register with index = the decimal value of the output of the mux of registers 
/////////////////////////////////////////////////////////////////////////////////////////////////

//Wires
                //Wires.append("Instruction # " +j+ "\n");//to be fixed
                Wires.append("PC output: " + PC_temp + "\n");//to be fixed
                Wires.append("PC+4 adder output: " + (PC_temp + 4) + "\n");//to be fixed
                Wires.append("Instruction Memory Output: " + w + "\n");
                Wires.append("Instruction [31:26]: " + w31 + "\n");
                Wires.append("Instruction [25:21]: " + w25 + "\n");
                Wires.append("Instruction [20:16]: " + w20 + "\n");
                Wires.append("Instruction [15:11]: " + w15 + "\n");
                Wires.append("Instruction [15:0]: " + w150 + "\n");
                Wires.append("RegDestination Mux output: " + muxRout + "\n");
                Wires.append("Sign-extender Output: " + b.ConvertToBinary(Integer.parseInt(w150, 2), 32) + "\n");
                Wires.append("Shift-2 output:  " + s.shift(Integer.parseInt(b.ConvertToBinary(Integer.parseInt(w150, 2), 32), 2), 32) + "\n");
                Wires.append("Read data 1: " + reg.readdata(Integer.parseInt(w25, 2)) + "\n");
                Wires.append("Read data 2: " + reg.readdata(Integer.parseInt(w20, 2)) + "\n");
                Wires.append("ALU second input: " + muxAout + "\n");
                Wires.append("Zero flag: " + alu.getZeroflag() + "\n");
                Wires.append("ALU output: " + alu.operations() + "\n");
                Wires.append("DataMemory output: " + DMem.load(alu.operations()) + "\n");
                Wires.append("MemtoReg Mux output: " + muxDout + "\n");
                Wires.append("PC input: " + muxAndout + "\n");
                Wires.append("AND gate output:  " + (Integer.parseInt(c.getBranch(), 2) & alu.getZeroflag()) + "\n");
                Wires.append("RegDest: " + c.getRegDst() + "\n");
                Wires.append("Branch: " + c.getBranch() + "\n");
                Wires.append("MemRead: " + c.getMemRead() + "\n");
                Wires.append("MemtoReg " + c.getMemToReg() + "\n");
                Wires.append("AluOp: " + c.getALUOp() + "\n");
                Wires.append("MemWrite: " + c.getMemWrite() + "\n");
                Wires.append("AluSrc: " + c.getALUSrc() + "\n");
                Wires.append("RegWrite: " + c.getRegWrite() + "\n");
                Wires.append("ALU control output: " + ac.ALUController(c.getALUOp(), w5) + "\n");

                if (c.getJump().equals("1")) {
                    Wires.append("-----JUMP HANDLING----- " + "\n");
                    Wires.append("PC input: " + muxJout + "\n");
                    Wires.append("Instruction[25:0]: " + w250 + "\n");
                    Wires.append("Jump Address[31:0]: " + jump + "\n");
                    Wires.append("MUXJ output: " + muxJout + "\n");

                }

                Wires.append("===============================\n");

            }
            if (c.getJump().equals("1")) {
                PC_temp = muxJout;
            } else if (Collect.get(i).getInstruction().equals("jr")) {
                PC_temp = reg.readdata(31);
            } else {
                PC_temp = muxAndout;
            }
            cycles++;
        }
        clockcycles.setText(Integer.toString(cycles));

    }

    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MipsDatapath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MipsDatapath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MipsDatapath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MipsDatapath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MipsDatapath().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Iinstruction;
    private javax.swing.JTextArea Instructions;
    private javax.swing.JLabel JLabel;
    private javax.swing.JTextField Jaddress;
    private javax.swing.JComboBox<String> Jinstruction;
    private javax.swing.JTable Memorytable;
    private javax.swing.JTable Registerstable;
    private javax.swing.JComboBox<String> Rinstruction;
    private javax.swing.JTextArea Wires;
    private javax.swing.JButton addI;
    private javax.swing.JButton addJ;
    private javax.swing.JButton addR;
    private javax.swing.JButton addextra;
    private javax.swing.JTextField address;
    private javax.swing.JButton assemble;
    private javax.swing.JLabel clockcycles;
    private javax.swing.JTextField extraaddress;
    private javax.swing.JTextField extradata;
    private javax.swing.JTextField imm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> rd;
    private javax.swing.JButton reset;
    private javax.swing.JComboBox<String> rsI;
    private javax.swing.JComboBox<String> rsR;
    private javax.swing.JComboBox<String> rtI;
    private javax.swing.JComboBox<String> rtR;
    private javax.swing.JTextField shamt;
    private javax.swing.ButtonGroup types;
    private javax.swing.JButton undo;
    // End of variables declaration//GEN-END:variables
}
